---
- name: Verify
  hosts: all
  become: true
  gather_facts: true
  tasks:
    - name: Check if SSH service is running
      ansible.builtin.service:
        name: "{{ ansible_os_family == 'RedHat' and 'sshd' or 'ssh' }}"
        state: started
      check_mode: true
      register: ssh_service_check

    - name: Verify SSH service is running
      ansible.builtin.assert:
        that:
          - not ssh_service_check.changed
        fail_msg: "SSH service is not running"
        success_msg: "SSH service is running"

    - name: Check SSH configuration file exists
      ansible.builtin.stat:
        path: /etc/ssh/sshd_config
      register: ssh_config_file

    - name: Verify SSH configuration file exists
      ansible.builtin.assert:
        that:
          - ssh_config_file.stat.exists
        fail_msg: "SSH configuration file does not exist"
        success_msg: "SSH configuration file exists"

    - name: Detect SSH version for verification
      ansible.builtin.shell: ssh -V 2>&1 | head -1 | sed 's/.*OpenSSH_\([0-9]\+\.[0-9]\+\).*/\1/'
      register: openssh_version_raw
      changed_when: false

    - name: Set SSH version fact
      ansible.builtin.set_fact:
        openssh_version: "{{ openssh_version_raw.stdout | float }}"

    - name: Determine OpenSSH configuration version for verification
      ansible.builtin.set_fact:
        openssh_config_version: >-
          {%- if openssh_version_raw.stdout | float >= 9.6 -%}
          9.6
          {%- elif openssh_version_raw.stdout | float >= 9.2 -%}
          9.2
          {%- else -%}
          8.2
          {%- endif -%}

    - name: Include OpenSSH version-specific algorithm variables for verification
      ansible.builtin.include_vars: "../../../vars/openssh-{{ openssh_config_version }}.yml"

    - name: Check if KexAlgorithms line exists in sshd_config (OpenSSH 8.5+)
      ansible.builtin.shell: grep "^KexAlgorithms" /etc/ssh/sshd_config || echo "NOT_FOUND"
      register: kex_algorithms_check
      changed_when: false
      when: openssh_version is version('8.5', '>=')

    - name: Verify modern KexAlgorithms are configured (OpenSSH 8.5+)
      ansible.builtin.assert:
        that:
          - kex_algorithms_check.stdout != "NOT_FOUND"
          - kex_algorithms_check.stdout | length > 0
        fail_msg: "Modern KexAlgorithms not properly configured for OpenSSH {{ openssh_version }}. Found: {{ kex_algorithms_check.stdout }}"
        success_msg: "Modern KexAlgorithms properly configured for OpenSSH {{ openssh_version }}"
      when: openssh_version is version('8.5', '>=') and kex_algorithms_check is defined

    - name: Check if KexAlgorithms line exists in sshd_config (OpenSSH < 8.5)
      ansible.builtin.shell: grep "^KexAlgorithms" /etc/ssh/sshd_config || echo "NOT_FOUND"
      register: kex_algorithms_legacy_check
      changed_when: false
      when: openssh_version is version('8.5', '<')

    - name: Verify legacy-compatible KexAlgorithms are configured (OpenSSH < 8.5)
      ansible.builtin.assert:
        that:
          - kex_algorithms_legacy_check.stdout != "NOT_FOUND"
          - kex_algorithms_legacy_check.stdout | length > 0
        fail_msg: "Legacy-compatible KexAlgorithms not properly configured for OpenSSH {{ openssh_version }}. Found: {{ kex_algorithms_legacy_check.stdout }}"
        success_msg: "Legacy-compatible KexAlgorithms properly configured for OpenSSH {{ openssh_version }}"
      when: openssh_version is version('8.5', '<') and kex_algorithms_legacy_check is defined

    - name: Check if custom SSH port is configured
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        line: "Port 12345"
        state: present
      check_mode: true
      register: ssh_port_check

    - name: Verify custom SSH port is configured
      ansible.builtin.assert:
        that:
          - not ssh_port_check.changed
        fail_msg: "Custom SSH port is not configured"
        success_msg: "Custom SSH port is configured"

    - name: Check if root login is disabled
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        line: "PermitRootLogin no"
        state: present
      check_mode: true
      register: ssh_root_login_check

    - name: Verify root login is disabled
      ansible.builtin.assert:
        that:
          - not ssh_root_login_check.changed
        fail_msg: "Root login is not disabled"
        success_msg: "Root login is disabled"

    - name: Check if password authentication is disabled
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        line: "PasswordAuthentication no"
        state: present
      check_mode: true
      register: ssh_password_auth_check

    - name: Verify password authentication is disabled
      ansible.builtin.assert:
        that:
          - not ssh_password_auth_check.changed
        fail_msg: "Password authentication is not disabled"
        success_msg: "Password authentication is disabled"

    - name: Test SSH connection to configured port
      ansible.builtin.wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: 12345
        timeout: 10
        state: started
      register: ssh_connection_test

    - name: Verify SSH connection is possible
      ansible.builtin.assert:
        that:
          - ssh_connection_test is succeeded
        fail_msg: "SSH connection test failed - port 12345 is not accessible"
        success_msg: "SSH connection test successful - port 12345 is accessible"

    # SSH Audit verification using https://github.com/jtesta/ssh-audit
    - name: Install pip3 for ssh-audit installation
      ansible.builtin.package:
        name: python3-pip
        state: present

    - name: Install ssh-audit using pip3
      ansible.builtin.pip:
        name: ssh-audit
        state: present
        executable: pip3

    - name: Run ssh-audit against localhost on configured port
      ansible.builtin.command: ssh-audit localhost:12345
      register: ssh_audit_result
      changed_when: false
      failed_when: false

    - name: Display ssh-audit results
      ansible.builtin.debug:
        var: ssh_audit_result.stdout_lines

    - name: Check ssh-audit exit code for critical issues
      ansible.builtin.assert:
        that:
          - ssh_audit_result.rc == 0
        fail_msg: "ssh-audit found critical security issues. Exit code: {{ ssh_audit_result.rc }}. Check the output above for details."
        success_msg: "ssh-audit security verification passed successfully"

    - name: Run ssh-audit in JSON format for detailed analysis
      ansible.builtin.command: ssh-audit --format=json localhost:12345
      register: ssh_audit_json_result
      changed_when: false
      failed_when: false

    - name: Parse ssh-audit JSON results
      ansible.builtin.set_fact:
        ssh_audit_json: "{{ ssh_audit_json_result.stdout | from_json }}"
      when: ssh_audit_json_result.rc == 0

    - name: Verify no critical or high severity findings
      ansible.builtin.assert:
        that:
          - ssh_audit_json.banner is defined
          - ssh_audit_json.banner.software is defined
        fail_msg: "ssh-audit JSON output is missing expected fields"
        success_msg: "ssh-audit completed analysis successfully"
      when: ssh_audit_json is defined

    - name: Check for weak algorithms (if any are reported)
      ansible.builtin.debug:
        msg: "SSH-Audit analysis completed. Check output above for any security recommendations."

